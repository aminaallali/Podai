'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { 
  FiSearch, 
  FiArrowLeft, 
  FiArrowRight, 
  FiUser, 
  FiSettings, 
  FiLogOut, 
  FiHeart, 
  FiClock, 
  FiChevronDown, 
  FiX,
  FiBell,
  FiHelpCircle,
  FiMoon,
  FiSun
} from 'react-icons/fi';

// Component interfaces
interface NavbarProps {
  className?: string;
}

interface SearchResultItem {
  id: string;
  title: string;
  type: 'podcast' | 'playlist' | 'category';
  imageUrl?: string;
}

interface DropdownItemProps {
  icon: React.ReactNode;
  label: string;
  href?: string;
  onClick?: () => void;
  divider?: boolean;
}

// Main Navbar Component
export default function Navbar({ className = '' }: NavbarProps) {
  const router = useRouter();
  const pathname = usePathname();
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResultItem[]>([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(true);
  const searchInputRef = useRef<HTMLInputElement>(null);
  const userDropdownRef = useRef<HTMLDivElement>(null);
  const searchResultsRef = useRef<HTMLDivElement>(null);

  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setSearchQuery(query);
    
    if (query.length > 1) {
      // Mock search results - in a real app, this would call an API
      const mockResults: SearchResultItem[] = [
        { id: '1', title: 'Tech Talk Daily', type: 'podcast' },
        { id: '2', title: 'Morning Motivation', type: 'playlist' },
        { id: '3', title: 'Comedy', type: 'category' },
        { id: '4', title: 'Science Weekly', type: 'podcast' },
      ];
      
      // Filter results based on query
      const filteredResults = mockResults.filter(item => 
        item.title.toLowerCase().includes(query.toLowerCase())
      );
      
      setSearchResults(filteredResults);
      setShowSearchResults(true);
    } else {
      setShowSearchResults(false);
    }
  };

  // Handle search form submission
  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      router.push(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
      setShowSearchResults(false);
    }
  };

  // Toggle user dropdown
  const toggleUserDropdown = () => {
    setShowUserDropdown(!showUserDropdown);
  };

  // Toggle dark/light mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
    // In a real app, this would update a theme context or localStorage setting
  };

  // Handle navigation
  const handleBack = () => {
    router.back();
  };

  const handleForward = () => {
    router.forward();
  };

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      // Close search results if clicking outside
      if (
        searchResultsRef.current && 
        !searchResultsRef.current.contains(event.target as Node) &&
        !searchInputRef.current?.contains(event.target as Node)
      ) {
        setShowSearchResults(false);
      }
      
      // Close user dropdown if clicking outside
      if (
        userDropdownRef.current && 
        !userDropdownRef.current.contains(event.target as Node)
      ) {
        setShowUserDropdown(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Close dropdowns when navigating
  useEffect(() => {
    setShowSearchResults(false);
    setShowUserDropdown(false);
  }, [pathname]);

  return (
    <header 
      className={`navbar px-4 flex items-center justify-between ${className}`}
      aria-label="Main header"
    >
      {/* Left section: Navigation buttons */}
      <div className="flex items-center">
        <div className="flex items-center mr-4">
          <button 
            onClick={handleBack} 
            className="w-8 h-8 flex items-center justify-center rounded-full bg-spotify-black text-spotify-gray-300 hover:text-white mr-2"
            aria-label="Go back"
          >
            <FiArrowLeft />
          </button>
          <button 
            onClick={handleForward} 
            className="w-8 h-8 flex items-center justify-center rounded-full bg-spotify-black text-spotify-gray-300 hover:text-white"
            aria-label="Go forward"
          >
            <FiArrowRight />
          </button>
        </div>
        
        {/* Search form - only show on larger screens or search pages */}
        <div className={`hidden md:block ${pathname?.includes('/search') ? 'flex-grow max-w-xl' : ''}`}>
          <form onSubmit={handleSearchSubmit} className="relative">
            <div className="relative">
              <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-spotify-gray-300">
                <FiSearch />
              </span>
              <input
                ref={searchInputRef}
                type="text"
                placeholder="Search for podcasts, playlists, or categories"
                value={searchQuery}
                onChange={handleSearchChange}
                className="bg-spotify-gray-800 text-white py-2 pl-10 pr-4 rounded-full w-full focus:outline-none focus:ring-2 focus:ring-spotify-green"
                aria-label="Search"
              />
              {searchQuery && (
                <button
                  type="button"
                  onClick={() => setSearchQuery('')}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-spotify-gray-300 hover:text-white"
                  aria-label="Clear search"
                >
                  <FiX />
                </button>
              )}
            </div>
            
            {/* Search results dropdown */}
            {showSearchResults && searchResults.length > 0 && (
              <div 
                ref={searchResultsRef}
                className="absolute top-full left-0 right-0 mt-2 bg-spotify-gray-700 rounded-md shadow-lg overflow-hidden z-50"
              >
                <div className="p-2">
                  <h3 className="text-xs text-spotify-gray-300 uppercase px-3 py-2">
                    Search Results
                  </h3>
                  <ul>
                    {searchResults.map(result => (
                      <li key={result.id}>
                        <Link 
                          href={`/${result.type}s/${result.id}`}
                          className="flex items-center px-3 py-2 hover:bg-spotify-gray-600 rounded-md"
                        >
                          <div className="w-10 h-10 rounded overflow-hidden bg-spotify-gray-600 flex-shrink-0 mr-3">
                            {result.imageUrl ? (
                              <Image 
                                src={result.imageUrl} 
                                alt={result.title} 
                                width={40} 
                                height={40} 
                                className="w-full h-full object-cover"
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center text-spotify-gray-300">
                                {result.type === 'podcast' && <FiClock />}
                                {result.type === 'playlist' && <FiHeart />}
                                {result.type === 'category' && <FiSearch />}
                              </div>
                            )}
                          </div>
                          <div>
                            <p className="text-white font-medium">{result.title}</p>
                            <p className="text-xs text-spotify-gray-300 capitalize">{result.type}</p>
                          </div>
                        </Link>
                      </li>
                    ))}
                  </ul>
                  <div className="mt-2 pt-2 border-t border-spotify-gray-600">
                    <Link 
                      href={`/search?q=${encodeURIComponent(searchQuery)}`}
                      className="block px-3 py-2 text-spotify-green text-sm hover:underline"
                    >
                      See all results for "{searchQuery}"
                    </Link>
                  </div>
                </div>
              </div>
            )}
          </form>
        </div>
      </div>
      
      {/* Right section: User profile and settings */}
      <div className="flex items-center">
        {/* Notifications */}
        <button 
          className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-spotify-gray-700 text-spotify-gray-300 hover:text-white mr-2"
          aria-label="Notifications"
        >
          <FiBell />
        </button>
        
        {/* User profile dropdown */}
        <div className="relative" ref={userDropdownRef}>
          <button 
            onClick={toggleUserDropdown}
            className="flex items-center bg-spotify-gray-800 hover:bg-spotify-gray-700 rounded-full p-0.5 transition-colors"
            aria-label="User menu"
            aria-expanded={showUserDropdown}
          >
            <div className="w-7 h-7 rounded-full bg-spotify-green flex items-center justify-center mr-1">
              <FiUser className="text-black text-sm" />
            </div>
            <span className="hidden sm:block text-sm font-medium mr-2">User</span>
            <FiChevronDown className={`text-xs transition-transform duration-200 ${showUserDropdown ? 'rotate-180' : ''}`} />
          </button>
          
          {/* Dropdown menu */}
          {showUserDropdown && (
            <div className="absolute right-0 mt-2 w-56 bg-spotify-gray-700 rounded-md shadow-lg overflow-hidden z-50">
              <div className="p-2">
                <DropdownItem 
                  icon={<FiUser />} 
                  label="Profile" 
                  href="/profile" 
                />
                <DropdownItem 
                  icon={<FiSettings />} 
                  label="Settings" 
                  href="/settings" 
                />
                <DropdownItem 
                  icon={<FiHelpCircle />} 
                  label="Help & Support" 
                  href="/support" 
                  divider 
                />
                <DropdownItem 
                  icon={isDarkMode ? <FiSun /> : <FiMoon />} 
                  label={isDarkMode ? "Light Mode" : "Dark Mode"} 
                  onClick={toggleDarkMode} 
                />
                <DropdownItem 
                  icon={<FiLogOut />} 
                  label="Log Out" 
                  onClick={() => console.log('Logout clicked')} 
                  divider 
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}

// Dropdown Item Component
const DropdownItem: React.FC<DropdownItemProps> = ({ 
  icon, 
  label, 
  href, 
  onClick, 
  divider = false 
}) => {
  const content = (
    <>
      <span className="mr-3 text-spotify-gray-300">{icon}</span>
      <span>{label}</span>
    </>
  );
  
  return (
    <>
      {href ? (
        <Link 
          href={href} 
          className="flex items-center px-3 py-2 text-white hover:bg-spotify-gray-600 rounded-md"
        >
          {content}
        </Link>
      ) : (
        <button 
          onClick={onClick} 
          className="flex items-center px-3 py-2 text-white hover:bg-spotify-gray-600 rounded-md w-full text-left"
        >
          {content}
        </button>
      )}
      
      {divider && (
        <div className="my-1 border-t border-spotify-gray-600" />
      )}
    </>
  );
};

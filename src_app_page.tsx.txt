'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { FiPlus, FiTrendingUp, FiHeadphones, FiGrid, FiList, FiClock } from 'react-icons/fi';
import { toast } from 'react-hot-toast';
import { 
  getAllCategories, 
  CategoryInfo,
  Podcast,
  Playlist,
  createLocalStorageProvider,
  getTrendingPodcasts
} from '@/lib/podcast-utils';

// Component interfaces
interface HeroSectionProps {
  onCreateClick: () => void;
}

interface CategoryGridProps {
  categories: CategoryInfo[];
  isLoading: boolean;
}

interface PodcastCardProps {
  podcast: Podcast;
}

interface PlaylistCardProps {
  playlist: Playlist;
}

interface SectionHeaderProps {
  title: string;
  icon: React.ReactNode;
  viewAllLink?: string;
}

// Main Page Component
export default function HomePage() {
  // State management
  const [categories, setCategories] = useState<CategoryInfo[]>([]);
  const [recentPodcasts, setRecentPodcasts] = useState<Podcast[]>([]);
  const [featuredPlaylists, setFeaturedPlaylists] = useState<Playlist[]>([]);
  const [trendingPodcasts, setTrendingPodcasts] = useState<Podcast[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Initialize storage provider
  const storageProvider = createLocalStorageProvider();

  // Load initial data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        
        // Get all categories
        const allCategories = getAllCategories();
        setCategories(allCategories);
        
        // Get recent podcasts
        const podcasts = await storageProvider.listPodcasts({ 
          limit: 8,
          offset: 0
        });
        setRecentPodcasts(podcasts);
        
        // Get featured playlists
        const playlists = await storageProvider.listPlaylists({
          limit: 6,
          offset: 0,
          filter: { isPublic: true }
        });
        setFeaturedPlaylists(playlists);
        
        // Get trending podcasts
        if (podcasts.length > 0) {
          const trending = getTrendingPodcasts(podcasts, 4);
          setTrendingPodcasts(trending);
        }
        
        setIsLoading(false);
      } catch (err) {
        console.error('Error loading data:', err);
        setError('Failed to load content. Please try again later.');
        setIsLoading(false);
        toast.error('Failed to load content');
      }
    };
    
    fetchData();
  }, []);

  // Handle create podcast click
  const handleCreatePodcastClick = () => {
    // Navigate to create podcast page
    window.location.href = '/create';
  };

  // Handle error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh] text-center p-4">
        <FiHeadphones className="text-spotify-gray-300 text-6xl mb-4" />
        <h2 className="text-2xl font-bold mb-2">Something went wrong</h2>
        <p className="text-spotify-gray-300 mb-6">{error}</p>
        <button 
          onClick={() => window.location.reload()} 
          className="btn btn-primary"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="home-page">
      {/* Hero Section */}
      <HeroSection onCreateClick={handleCreatePodcastClick} />
      
      {/* Quick Create Button (Mobile) */}
      <div className="md:hidden my-6 px-2">
        <button 
          onClick={handleCreatePodcastClick}
          className="btn btn-primary w-full flex items-center justify-center gap-2"
        >
          <FiPlus /> Create New Podcast
        </button>
      </div>
      
      {/* Categories Section */}
      <section className="mb-10">
        <SectionHeader 
          title="Browse Categories" 
          icon={<FiGrid />} 
          viewAllLink="/categories" 
        />
        <CategoryGrid categories={categories} isLoading={isLoading} />
      </section>
      
      {/* Featured Playlists Section */}
      <section className="mb-10">
        <SectionHeader 
          title="Featured Playlists" 
          icon={<FiList />} 
          viewAllLink="/playlists" 
        />
        
        {isLoading ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="playlist-card animate-pulse-slow">
                <div className="aspect-square bg-spotify-gray-600" />
                <div className="p-4">
                  <div className="h-4 bg-spotify-gray-600 rounded mb-2 w-3/4"></div>
                  <div className="h-3 bg-spotify-gray-600 rounded w-1/2"></div>
                </div>
              </div>
            ))}
          </div>
        ) : featuredPlaylists.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {featuredPlaylists.map(playlist => (
              <PlaylistCard key={playlist.id} playlist={playlist} />
            ))}
          </div>
        ) : (
          <div className="text-center py-10 bg-spotify-gray-800 rounded-lg">
            <p className="text-spotify-gray-300">No playlists available yet</p>
            <button 
              onClick={() => window.location.href = '/playlists/create'} 
              className="btn btn-outline mt-4"
            >
              Create a Playlist
            </button>
          </div>
        )}
      </section>
      
      {/* Recent Podcasts Section */}
      <section className="mb-10">
        <SectionHeader 
          title="Recent Podcasts" 
          icon={<FiClock />} 
          viewAllLink="/podcasts" 
        />
        
        {isLoading ? (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="podcast-card animate-pulse-slow">
                <div className="aspect-square bg-spotify-gray-600" />
                <div className="p-4">
                  <div className="h-4 bg-spotify-gray-600 rounded mb-2 w-3/4"></div>
                  <div className="h-3 bg-spotify-gray-600 rounded w-1/2"></div>
                </div>
              </div>
            ))}
          </div>
        ) : recentPodcasts.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {recentPodcasts.slice(0, 4).map(podcast => (
              <PodcastCard key={podcast.id} podcast={podcast} />
            ))}
          </div>
        ) : (
          <div className="text-center py-10 bg-spotify-gray-800 rounded-lg">
            <p className="text-spotify-gray-300">No podcasts created yet</p>
            <button 
              onClick={handleCreatePodcastClick} 
              className="btn btn-primary mt-4"
            >
              Create Your First Podcast
            </button>
          </div>
        )}
      </section>
      
      {/* Trending Section */}
      {trendingPodcasts.length > 0 && (
        <section className="mb-10">
          <SectionHeader 
            title="Trending Now" 
            icon={<FiTrendingUp />} 
            viewAllLink="/trending" 
          />
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {trendingPodcasts.map(podcast => (
              <div 
                key={podcast.id} 
                className="flex bg-spotify-gray-800 rounded-lg overflow-hidden hover:bg-spotify-gray-700 transition-colors"
              >
                <div className="w-24 h-24 flex-shrink-0">
                  {podcast.coverImageUrl ? (
                    <Image 
                      src={podcast.coverImageUrl} 
                      alt={podcast.title} 
                      width={96} 
                      height={96} 
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full bg-podcast-accent-purple flex items-center justify-center">
                      <FiHeadphones className="text-2xl" />
                    </div>
                  )}
                </div>
                <div className="p-3">
                  <h3 className="font-bold text-white text-spotify-ellipsis">{podcast.title}</h3>
                  <p className="text-xs text-spotify-gray-300 line-clamp-2">{podcast.description}</p>
                  <div className="flex items-center mt-1">
                    <FiHeadphones className="text-spotify-gray-300 text-xs mr-1" />
                    <span className="text-xs text-spotify-gray-300">{podcast.stats.plays} plays</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>
      )}
    </div>
  );
}

// Hero Section Component
const HeroSection: React.FC<HeroSectionProps> = ({ onCreateClick }) => {
  return (
    <div className="relative bg-gradient-to-b from-podcast-accent-blue to-spotify-black rounded-xl overflow-hidden mb-8">
      <div className="absolute inset-0 bg-gradient-to-r from-black/70 to-transparent" />
      <div className="relative z-10 p-6 md:p-10 flex flex-col md:flex-row items-center">
        <div className="md:w-2/3 mb-6 md:mb-0">
          <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-white">
            Create Amazing Podcasts with AI
          </h1>
          <p className="text-spotify-gray-100 text-lg mb-6 max-w-xl">
            Generate professional podcast scripts and convert them to realistic voices in minutes. 
            No recording equipment needed.
          </p>
          <div className="flex flex-wrap gap-3">
            <button 
              onClick={onCreateClick}
              className="btn btn-primary px-6 py-3 text-lg flex items-center gap-2"
            >
              <FiPlus /> Create New Podcast
            </button>
            <Link href="/explore" className="btn btn-outline px-6 py-3 text-lg">
              Explore Examples
            </Link>
          </div>
        </div>
        <div className="md:w-1/3 flex justify-center">
          <div className="relative w-64 h-64">
            <div className="absolute inset-0 rounded-full bg-spotify-green/20 animate-pulse-slow" />
            <div className="absolute inset-4 rounded-full bg-spotify-green/30 animate-pulse-slow animation-delay-300" />
            <div className="absolute inset-8 rounded-full bg-spotify-black flex items-center justify-center">
              <FiHeadphones className="text-spotify-green text-6xl" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Category Grid Component
const CategoryGrid: React.FC<CategoryGridProps> = ({ categories, isLoading }) => {
  if (isLoading) {
    return (
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
        {[...Array(6)].map((_, i) => (
          <div key={i} className="aspect-square bg-spotify-gray-700 rounded-lg animate-pulse-slow" />
        ))}
      </div>
    );
  }
  
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
      {categories.slice(0, 12).map(category => (
        <Link 
          key={category.id} 
          href={`/categories/${category.id}`}
          className="category-card spotify-card-hover"
          style={{ backgroundColor: category.color }}
        >
          <div className="category-card-overlay" />
          <div className="category-card-content">
            <h3 className="text-xl font-bold">{category.name}</h3>
            <p className="text-xs text-spotify-gray-100 mt-1">{category.subcategories.length} subcategories</p>
          </div>
        </Link>
      ))}
    </div>
  );
};

// Podcast Card Component
const PodcastCard: React.FC<PodcastCardProps> = ({ podcast }) => {
  return (
    <Link href={`/podcasts/${podcast.id}`} className="podcast-card spotify-card-hover">
      <div className="podcast-card-image-container relative">
        {podcast.coverImageUrl ? (
          <Image 
            src={podcast.coverImageUrl} 
            alt={podcast.title} 
            width={300} 
            height={300} 
            className="podcast-card-image"
          />
        ) : (
          <div className="podcast-card-image bg-gradient-to-br from-podcast-accent-purple to-podcast-accent-blue flex items-center justify-center">
            <FiHeadphones className="text-4xl text-white" />
          </div>
        )}
        
        {/* Duration badge */}
        <div className="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
          {Math.floor(podcast.duration / 60)}:{String(Math.floor(podcast.duration % 60)).padStart(2, '0')}
        </div>
      </div>
      
      <div className="podcast-card-content">
        <h3 className="podcast-card-title">{podcast.title}</h3>
        <p className="podcast-card-description">{podcast.description}</p>
        
        <div className="flex items-center justify-between mt-2">
          <span className="text-xs text-spotify-gray-300 capitalize">{podcast.metadata.category}</span>
          <span className="text-xs text-spotify-gray-300">{podcast.stats.plays} plays</span>
        </div>
      </div>
    </Link>
  );
};

// Playlist Card Component
const PlaylistCard: React.FC<PlaylistCardProps> = ({ playlist }) => {
  return (
    <Link href={`/playlists/${playlist.id}`} className="playlist-card spotify-card-hover">
      <div className="aspect-square relative overflow-hidden">
        {playlist.coverImageUrl ? (
          <Image 
            src={playlist.coverImageUrl} 
            alt={playlist.name} 
            width={200} 
            height={200} 
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-podcast-accent-orange to-podcast-accent-pink flex items-center justify-center">
            <FiList className="text-4xl text-white" />
          </div>
        )}
        
        {/* Playlist type badge */}
        {playlist.type !== 'user-created' && (
          <div className="absolute top-2 left-2 bg-black/70 text-white text-xs px-2 py-1 rounded-full capitalize">
            {playlist.type.replace('-', ' ')}
          </div>
        )}
      </div>
      
      <div className="p-3">
        <h3 className="font-bold text-white text-spotify-ellipsis">{playlist.name}</h3>
        <p className="text-xs text-spotify-gray-300 line-clamp-2">{playlist.description}</p>
        <p className="text-xs text-spotify-gray-400 mt-1">{playlist.podcastIds.length} podcasts</p>
      </div>
    </Link>
  );
};

// Section Header Component
const SectionHeader: React.FC<SectionHeaderProps> = ({ title, icon, viewAllLink }) => {
  return (
    <div className="flex items-center justify-between mb-4">
      <div className="flex items-center">
        <span className="text-spotify-green mr-2">{icon}</span>
        <h2 className="text-xl font-bold">{title}</h2>
      </div>
      
      {viewAllLink && (
        <Link 
          href={viewAllLink} 
          className="text-sm text-spotify-gray-300 hover:text-white transition-colors"
        >
          View all
        </Link>
      )}
    </div>
  );
};
